# Generated from ev.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,260,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,3,8,131,8,8,1,8,4,8,134,8,8,
        11,8,12,8,135,1,9,3,9,139,8,9,1,9,4,9,142,8,9,11,9,12,9,143,1,9,
        1,9,4,9,148,8,9,11,9,12,9,149,3,9,152,8,9,1,10,1,10,5,10,156,8,10,
        10,10,12,10,159,9,10,1,10,1,10,1,11,1,11,5,11,165,8,11,10,11,12,
        11,168,9,11,1,11,1,11,1,12,4,12,173,8,12,11,12,12,12,174,1,12,1,
        12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
        31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
        37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
        44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,
        50,1,51,1,51,1,52,1,52,0,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,0,31,0,33,0,35,0,37,0,39,0,
        41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,
        67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,
        93,0,95,0,97,0,99,0,101,0,103,0,105,0,1,0,32,4,0,65,90,92,92,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,1,0,39,39,
        2,0,9,9,32,32,1,0,48,57,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,
        99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,
        71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,
        106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,
        78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,
        2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,
        117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,
        0,89,89,121,121,2,0,90,90,122,122,228,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,1,107,1,0,0,0,3,109,1,0,0,0,5,117,1,0,0,0,7,
        119,1,0,0,0,9,121,1,0,0,0,11,123,1,0,0,0,13,125,1,0,0,0,15,127,1,
        0,0,0,17,130,1,0,0,0,19,138,1,0,0,0,21,153,1,0,0,0,23,162,1,0,0,
        0,25,172,1,0,0,0,27,178,1,0,0,0,29,182,1,0,0,0,31,184,1,0,0,0,33,
        186,1,0,0,0,35,188,1,0,0,0,37,190,1,0,0,0,39,192,1,0,0,0,41,194,
        1,0,0,0,43,196,1,0,0,0,45,198,1,0,0,0,47,200,1,0,0,0,49,202,1,0,
        0,0,51,204,1,0,0,0,53,206,1,0,0,0,55,208,1,0,0,0,57,210,1,0,0,0,
        59,212,1,0,0,0,61,214,1,0,0,0,63,216,1,0,0,0,65,218,1,0,0,0,67,220,
        1,0,0,0,69,222,1,0,0,0,71,224,1,0,0,0,73,226,1,0,0,0,75,228,1,0,
        0,0,77,230,1,0,0,0,79,232,1,0,0,0,81,234,1,0,0,0,83,236,1,0,0,0,
        85,238,1,0,0,0,87,240,1,0,0,0,89,242,1,0,0,0,91,244,1,0,0,0,93,246,
        1,0,0,0,95,248,1,0,0,0,97,250,1,0,0,0,99,252,1,0,0,0,101,254,1,0,
        0,0,103,256,1,0,0,0,105,258,1,0,0,0,107,108,5,58,0,0,108,2,1,0,0,
        0,109,110,5,46,0,0,110,111,5,100,0,0,111,112,5,101,0,0,112,113,5,
        102,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,5,101,0,0,116,
        4,1,0,0,0,117,118,5,40,0,0,118,6,1,0,0,0,119,120,5,44,0,0,120,8,
        1,0,0,0,121,122,5,41,0,0,122,10,1,0,0,0,123,124,5,64,0,0,124,12,
        1,0,0,0,125,126,5,35,0,0,126,14,1,0,0,0,127,128,5,36,0,0,128,16,
        1,0,0,0,129,131,7,0,0,0,130,129,1,0,0,0,131,133,1,0,0,0,132,134,
        7,1,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,
        1,0,0,0,136,18,1,0,0,0,137,139,5,45,0,0,138,137,1,0,0,0,138,139,
        1,0,0,0,139,141,1,0,0,0,140,142,3,29,14,0,141,140,1,0,0,0,142,143,
        1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,151,1,0,0,0,145,147,
        5,46,0,0,146,148,3,29,14,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,
        1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,145,1,0,0,0,151,152,
        1,0,0,0,152,20,1,0,0,0,153,157,5,59,0,0,154,156,8,2,0,0,155,154,
        1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,
        1,0,0,0,159,157,1,0,0,0,160,161,6,10,0,0,161,22,1,0,0,0,162,166,
        5,39,0,0,163,165,8,3,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,
        1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,
        5,39,0,0,170,24,1,0,0,0,171,173,7,2,0,0,172,171,1,0,0,0,173,174,
        1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,
        6,12,0,0,177,26,1,0,0,0,178,179,7,4,0,0,179,180,1,0,0,0,180,181,
        6,13,0,0,181,28,1,0,0,0,182,183,7,5,0,0,183,30,1,0,0,0,184,185,5,
        46,0,0,185,32,1,0,0,0,186,187,7,6,0,0,187,34,1,0,0,0,188,189,7,7,
        0,0,189,36,1,0,0,0,190,191,7,8,0,0,191,38,1,0,0,0,192,193,7,9,0,
        0,193,40,1,0,0,0,194,195,7,10,0,0,195,42,1,0,0,0,196,197,7,11,0,
        0,197,44,1,0,0,0,198,199,7,12,0,0,199,46,1,0,0,0,200,201,7,13,0,
        0,201,48,1,0,0,0,202,203,7,14,0,0,203,50,1,0,0,0,204,205,7,15,0,
        0,205,52,1,0,0,0,206,207,7,16,0,0,207,54,1,0,0,0,208,209,7,17,0,
        0,209,56,1,0,0,0,210,211,7,18,0,0,211,58,1,0,0,0,212,213,7,19,0,
        0,213,60,1,0,0,0,214,215,7,20,0,0,215,62,1,0,0,0,216,217,7,21,0,
        0,217,64,1,0,0,0,218,219,7,22,0,0,219,66,1,0,0,0,220,221,7,23,0,
        0,221,68,1,0,0,0,222,223,7,24,0,0,223,70,1,0,0,0,224,225,7,25,0,
        0,225,72,1,0,0,0,226,227,7,26,0,0,227,74,1,0,0,0,228,229,7,27,0,
        0,229,76,1,0,0,0,230,231,7,28,0,0,231,78,1,0,0,0,232,233,7,29,0,
        0,233,80,1,0,0,0,234,235,7,30,0,0,235,82,1,0,0,0,236,237,7,31,0,
        0,237,84,1,0,0,0,238,239,5,95,0,0,239,86,1,0,0,0,240,241,5,48,0,
        0,241,88,1,0,0,0,242,243,5,49,0,0,243,90,1,0,0,0,244,245,5,50,0,
        0,245,92,1,0,0,0,246,247,5,51,0,0,247,94,1,0,0,0,248,249,5,52,0,
        0,249,96,1,0,0,0,250,251,5,53,0,0,251,98,1,0,0,0,252,253,5,54,0,
        0,253,100,1,0,0,0,254,255,5,55,0,0,255,102,1,0,0,0,256,257,5,56,
        0,0,257,104,1,0,0,0,258,259,5,57,0,0,259,106,1,0,0,0,11,0,130,133,
        135,138,143,149,151,157,166,174,1,6,0,0
    ]

class evLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    NAME = 9
    NUMBER = 10
    COMMENT = 11
    STRING = 12
    EOL = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'.define'", "'('", "','", "')'", "'@'", "'#'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "NAME", "NUMBER", "COMMENT", "STRING", "EOL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "NAME", "NUMBER", "COMMENT", "STRING", "EOL", 
                  "WS", "DIGIT", "PERIOD", "A", "B", "C", "D", "E", "F", 
                  "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", 
                  "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "UBAR", "ZERO", 
                  "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", 
                  "EIGHT", "NINE" ]

    grammarFileName = "ev.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


